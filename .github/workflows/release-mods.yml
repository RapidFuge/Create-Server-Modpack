name: Release Mods

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for the release"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip
          python -m pip install toml requests

      - name: Read version from pack.toml
        id: get_version
        run: |
          python -c "
          import toml
          import os

          # Load the pack.toml file
          pack = toml.load('pack.toml')

          # Extract the version
          version = pack['version']

          # Print the version
          print(f'PACK_VERSION={version}')
          " > /tmp/version.env

      - name: Set up environment with version
        id: setup_env
        run: |
          echo "PACK_VERSION=$(grep PACK_VERSION /tmp/version.env | cut -d '=' -f2)" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Actions"

      - name: Download mods
        env:
          CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_KEY }}
        run: |
          mkdir -p mods/client mods/server
          python download_mods.py

      - name: Create ZIP files
        run: |
          zip -r client-mods.zip mods/client
          zip -r server-mods.zip mods/server

      - name: Create Git Tag
        id: create_tag
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git tag -a ${{ env.PACK_VERSION }} -m "Release ${{ env.PACK_VERSION }}"
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} ${{ env.PACK_VERSION }}

      - name: Encode Mod Summary
        id: encode_summary
        run: |
          base64 mod_summary.txt > mod_summary_base64.txt

      - name: Decode and Set Mod Summary Environment Variable
        id: decode_summary
        run: |
          MOD_SUMMARY=$(cat mod_summary_base64.txt | base64 --decode)
          echo "MOD_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$MOD_SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ env.PACK_VERSION }}
          release_name: Release ${{ env.PACK_VERSION }}
          body: ${{ env.MOD_SUMMARY }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Client)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./client-mods.zip
          asset_name: client-mods.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (Server)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./server-mods.zip
          asset_name: server-mods.zip
          asset_content_type: application/zip
